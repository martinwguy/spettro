HACKING
=======
Some notes on spettro's internal functioning.

The Lifetime of a calculation
-----------------------------
Spettro is a multi-threaded application.

It has a main thread which initializes everything and then loops
receiving notifications of key presses and mouse events and acts on them.
All screen updating is done from the main thread.

There is also a periodic timer which sends a "do-a-scroll" event to the
main loop. usually 25 times a second (the frame rate).

Audio playing is another autonomous thread managed by the audio-playing
toolkit. When SDL needs more audio data it calls a callback which gives it
the data it requires. If you're using the Emotion audio player instead,
it does this on its own from the audio file without our intervention.

The heavy-work calculation of FFTs happens in several asycnhronous threads.
and they communicate like this:

When the main loop is told to refresh columns of the screen, it schedules
the columns to be calculated by adding them to a linked list of calc_t
structures. 

When a calculation thread is idle, it calls get_work(), gives it the
most "interesting" column's data from the list of scheduled events and
remembers the job in progress by moving the calc_t from the list of work
to be done to a list of calculations being performed.
When the FFT thread has finished, it sends an event to the
main loop with the spectral data filled into the calc_t structure and
when the main loop processes *that* event, it redraws the appropriate
column of the screen and removes the calc_t from the list of columns being
calculated.

The source files are:

alloc.c		A malloc wrapper that checks for memory allocation failure.
args.c		Decodes command-line arguments and prints the help text.
audio.c		A wrapper for the selected audio toolkit, to do play/pause/seek.
audio_cache.c	Keeps a copy of audio data near the visible region, to avoid
		having to decode it repeatedly.
audio_file.c	Stuff to read and decode the audio file.
axes.c		Calculates and displays the frequency and time axes.
barlines.c	Overlays the display with bar- and beat-lines.
cache.c		Keeps a copy of FFT results from which screen columns are made.
calc.c		Converts a time into the audio file into an FFT result.
colormap.c	Turns FFT results into a range of colours.
convert.c	Utility functions to map various forms of frequency and time.
do_key.c	Given an internal key code, calls the functions to perform them.
dump.c		Writes the current screen to a PNG file (-o option and O key).
gui.c		A wrapper for the Graphical Toolkit being used.
interpolate.c	Maps linear FFT results onto the logarithmic vertical axis.
key.c		Maps key names received from the GUI to internal key names.
libmpg123.c	A wrapper for when libmpg123 is being used to decode MP3 files.
lock.c		A wrapper for whichever resource locking library is being used.
main.c		Initialize spettro, sets it running and responds to events.
mouse.c		Code to handle mouse clicks and drags.
overlay.c	Does the manuscript score lines, guitar strings and piano keys.
paint.c		Handle updating of the graph's on-screen columns, scrolling etc.
scheduler.c	Keeps a list of FFTs to perform, those in progress, and assigns
		new work to the FFT calculation threads when they want some.
spectrum.c	Code ripped from libsndfile-spectrum to create linear spectra.
text.c		Draw text on the screen, used by axes.c
timer.c		Code to handle the periodic timer interrupts.
ui.c		All variables that control what the screen should look like.
ui_funcs.c	Routines to perform the actions required by keypresses.
window.c	Various window functions applied to audio before FFTing it.
